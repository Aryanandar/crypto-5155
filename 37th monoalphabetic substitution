#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

// Function to find the greatest common divisor
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to encrypt a character using the affine cipher
char affineEncrypt(char p, int a, int b) {
    if (isalpha(p)) {
        p = toupper(p) - 'A'; // Convert character to 0-25
        return (a * p + b) % 26 + 'A';
    }
    return p; // Non-alphabet characters remain unchanged
}

// Function to find the modular multiplicative inverse of a
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Inverse doesn't exist
}

// Function to decrypt a character using the affine cipher
char affineDecrypt(char c, int a, int b) {
    if (isalpha(c)) {
        c = toupper(c) - 'A'; // Convert character to 0-25
        int a_inv = modInverse(a, 26);
        if (a_inv == -1) {
            printf("Multiplicative inverse of a doesn't exist, decryption impossible.\n");
            exit(1);
        }
        return (a_inv * (c - b + 26)) % 26 + 'A';
    }
    return c; // Non-alphabet characters remain unchanged
}

// Function to check if 'a' is coprime with 26
int isCoprime(int a, int m) {
    return gcd(a, m) == 1;
}

int main() {
    char plaintext[100], ciphertext[100];
    int a, b;

    printf("Enter the value of a (must be coprime with 26): ");
    scanf("%d", &a);
    if (!isCoprime(a, 26)) {
        printf("The value of a is not coprime with 26. Please enter a valid value.\n");
        return 1;
    }

    printf("Enter the value of b: ");
    scanf("%d", &b);

    printf("Enter the plaintext: ");
    scanf("%s", plaintext);

    int length = strlen(plaintext);

    // Encrypt the plaintext
    for (int i = 0; i < length; i++) {
        ciphertext[i] = affineEncrypt(plaintext[i], a, b);
    }
    ciphertext[length] = '\0';

    printf("Encrypted text: %s\n", ciphertext);

    // Decrypt the ciphertext
    for (int i = 0; i < length; i++) {
        plaintext[i] = affineDecrypt(ciphertext[i], a, b);
    }
    plaintext[length] = '\0';

    printf("Decrypted text: %s\n", plaintext);

    return 0;
}
