#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void generatePlayfairMatrix(char key[], char matrix[SIZE][SIZE]) {
    int used[26] = {0};
    int i, j, k = 0;
    for (i = 0; key[i]; i++) {
        if (key[i] == 'J') {
            key[i] = 'I';
        }
        if (!used[key[i] - 'A']) {
            used[key[i] - 'A'] = 1;
            matrix[k / SIZE][k % SIZE] = key[i];
            k++;
        }
    }
    for (i = 0; i < 26; i++) {
        if (!used[i] && (i != ('J' - 'A'))) {
            matrix[k / SIZE][k % SIZE] = 'A' + i;
            k++;
        }
    }
}
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void decryptPlayfair(char ciphertext[], char key[]) {
    char matrix[SIZE][SIZE];
    generatePlayfairMatrix(key, matrix);
    char plaintext[100];
    int len = strlen(ciphertext);
    int i, row1, col1, row2, col2;
    for (i = 0; i < len; i += 2) {
        findPosition(matrix, ciphertext[i], &row1, &col1);
        findPosition(matrix, ciphertext[i+1], &row2, &col2);
        if (row1 == row2) {
            plaintext[i] = matrix[row1][(col1 + SIZE - 1) % SIZE];
            plaintext[i+1] = matrix[row2][(col2 + SIZE - 1) % SIZE];
        } else if (col1 == col2) {
            plaintext[i] = matrix[(row1 + SIZE - 1) % SIZE][col1];
            plaintext[i+1] = matrix[(row2 + SIZE - 1) % SIZE][col2];
        } else {
            plaintext[i] = matrix[row1][col2];
            plaintext[i+1] = matrix[row2][col1];
        }
    }
    plaintext[len] = '\0';
    printf("Decrypted text: %s\n", plaintext);
}
int main() {
    char key[] = "MUST SEE YOU OVER CADOGAN WEST. COMING AT ONCE.";
    char ciphertext[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONAYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";
    decryptPlayfair(ciphertext, key);
    return 0;
}
